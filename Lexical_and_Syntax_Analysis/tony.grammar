/*
* Test Comments
*/

Package tony;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 
	

Tokens
	tab = 9;
	less = '<';
	great = '>';
	minus_eq = '-=';
    slash_eq = '/=' ;
	plus = '+';
	minus = '-';
	dmult = '**';
	mult = '*';
	div = '/';
	dot = '.';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	double_eq = '==';
	eq = '=';
	not_eq = '!=';
	exclam = '!';
	semi = ':';
	quote = '"';
	logic_plus = '&&';
	comma=',';
	qmark = '?';
	gqmark = ';';
	
	def = 'def';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	for = 'for';
	from = 'from';
	in = 'in';
	print = 'print';
	return = 'return';
    assert = 'assert';
    importok = 'import';
    as = 'as';
	true = 'true';
	false = 'false';
	
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = '-'? ' '*( digit+ | (digit+ '.' digit+));  
	id = letter (letter | digit)*;
	  
	string1 = '"'not_eol* '"';
	string2 = '''not_eol* ''';
Ignored Tokens
	blank, line_comment;
	

Productions
	goal = program* ;
	program = {function}function|{stat}statement;
	function = def id l_par argument? r_par semi statement ; 
	argument = id equal_val? comma_id_value*;

	equal_val = eq value;

	comma_id_value = comma id equal_val?;
	
	statement =  {if} tab* if comparison semi statement
			| {while} tab* while comparison semi statement
            | {for} tab* for [id1]:id in [id2]:id semi statement
            | {return} tab* return expression
            | {print} tab* print expression arglist_helper*
            | {anathesi} tab* id eq expression
            | {minus_eq} tab* id minus_eq expression
            | {slash_eq} tab* id slash_eq expression
            | {anathesi_pinaka} tab* id l_br [ex1]:expression r_br eq [ex2]:expression
            | {function_call} tab* function_call
            | {import} import;
				
	expression =   {multiplication} multiplication
             | {addition} expression plus multiplication
             | {subtraction} expression minus multiplication;
	
	multiplication = {power} power
					 |{multiplication} multiplication mult power|
					 {div}multiplication div power;
	
	
	power = {something}something |
			{dunami}power dmult something ; 

	

	
	something ={identifier}id
				|{parenthesis}l_par expression r_par
				|{id_aggiles} id l_br expression r_br
				|{function_call} function_call
				|{value} value;
	value =   {function_call} id dot function_call
			| {numb} number
			| {str1} string1
			| {str2}string2;
		
	comparison = {true}true|
			{false}false|
			{megalitero}[ex1]:expression great [ex2]:expression |
	    	{mikrotero} [ex1]:expression less [ex2]:expression|
			{diaforo}[ex1]:expression not_eq [ex2]:expression|
			{iso}[ex1]:expression double_eq [ex2]:expression ;  
				 
	arglist_helper = comma expression ; 
	function_call = id l_par arglist? r_par; 		
	arglist = expression arglist_helper*;
	import = {importorigin} importok module as_id? comma_mod_as_id*
			 | {importfrom} from module importok id as_id? comma_id_as_id* ;
	as_id = as id;
	comma_mod_as_id = comma module as_id? ;
	comma_id_as_id = comma id as_id? ;
	
	module = id_dot* id;
	id_dot = id dot;